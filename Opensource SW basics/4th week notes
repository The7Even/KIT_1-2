# Branch
- 하나의 저장소에 대해서 여러 사람들이 동시에 작업을 수행하기 위해, 각각의 사용자별로 할당되는 독립적인 작업 영역
- 저장소 하나 가지고 칸막이치고 나눠쓴다 생각하면 편함.

이때 작업된 각각의 Branch에 대해서 최종적으로 작업결과를 다시 합쳐버려서 완성시킬 수 있다.

각각의 Branch는 해당 Branch에서 수행된 일련의 commit 리스트 중에서 최신 commit을 가리킨다.
Branch에서 사용자가 새로운 commit을 수행할때마다, 해당 Branch는 최신 commit을 가리키케 된다.
또한, 각각의 commit은 자신의 직전 commit을 가리킨다.

node와 edge
ⓐ와 같은 글자들은 commit을 의미한다.
ⓐ -> ⓑ -> ⓒ -> ⓓ -> ⓔ 에서
ⓐ,ⓑ,ⓒ와 같은 것들은 node이다.
각각의 화살표는 edge이다.

추가 예시로
            ┌> ⓕ -> ⓖ -> ⓗ <--(Branch1)
ⓐ -> ⓑ -> ⓒ -> ⓓ -> ⓔ <--(main) <--(Head)
이러한 Branch가 2개 있다고 하자.
여기서 Head란, 현재 작업중인 Branch를 의미한다.
추가로, ⓒ는 Branch가 분기된 지점이기 때문에, 따로 base라는 용어로 불린다.

기본 용어
분기 (branch) - 현재 branch의 내용을 복사하여 새로운 branch를 만드는 작업.
합병 (merge)  - 분기했던 branch를 원래의 branch로 합치는 작업.
헤드 (HEAD)   - 현재 작업을 수행중인 branch를 가리키는 일종의 포인터.
              - checkout 명령으로 HEAD를 변경할 수 있음.
베이스 (base) - 앞서 설명했듯, 분기가 발생한 commit을 의미함.

브랜치 구조 표현
            ┌> ⓕ -> ⓖ -> ⓗ <--(Branch 1)
ⓐ -> ⓑ -> ⓒ -> ⓓ -> ⓔ <--(main) <--(HEAD)
                  └> ⓘ -> ⓙ -> ⓚ <--(Branch 2)

현재 이 구조는 총 3개의 Branch로 이루어져 있으며, ⓒ, ⓓ는 각 Branch1과 Branch2의 base이다. 현재 작업을 수행중인 branch는 main branch이다.
main branch에서 수행된 commit은 총 5번이고, Branch1과 Branch2는 각각 3번씩 commit 되었다. 이 Project에서 시행된 commit은 총 11회이다.

아 배고파
