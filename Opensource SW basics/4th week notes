# Branch
- 하나의 저장소에 대해서 여러 사람들이 동시에 작업을 수행하기 위해, 각각의 사용자별로 할당되는 독립적인 작업 영역
- 저장소 하나 가지고 칸막이치고 나눠쓴다 생각하면 편함.

이때 작업된 각각의 Branch에 대해서 최종적으로 작업결과를 다시 합쳐버려서 완성시킬 수 있다.

각각의 Branch는 해당 Branch에서 수행된 일련의 commit 리스트 중에서 최신 commit을 가리킨다.
Branch에서 사용자가 새로운 commit을 수행할때마다, 해당 Branch는 최신 commit을 가리키케 된다.
또한, 각각의 commit은 자신의 직전 commit을 가리킨다.

node와 edge
ⓐ와 같은 글자들은 commit을 의미한다.
ⓐ -> ⓑ -> ⓒ -> ⓓ -> ⓔ 에서
ⓐ,ⓑ,ⓒ와 같은 것들은 node이다.
각각의 화살표는 edge이다.

추가 예시로
            ┌> ⓕ -> ⓖ -> ⓗ <--(Branch1)
ⓐ -> ⓑ -> ⓒ -> ⓓ -> ⓔ <--(main) <--(Head)
이러한 Branch가 2개 있다고 하자.
여기서 Head란, 현재 작업중인 Branch를 의미한다.
추가로, ⓒ는 Branch가 분기된 지점이기 때문에, 따로 base라는 용어로 불린다.

기본 용어
분기 (branch) - 현재 branch의 내용을 복사하여 새로운 branch를 만드는 작업.
합병 (merge)  - 분기했던 branch를 원래의 branch로 합치는 작업.
헤드 (HEAD)   - 현재 작업을 수행중인 branch를 가리키는 일종의 포인터.
              - checkout 명령으로 HEAD를 변경할 수 있음.
베이스 (base) - 앞서 설명했듯, 분기가 발생한 commit을 의미함.

브랜치 구조 표현
            ┌> ⓕ -> ⓖ -> ⓗ <--(Branch 1)
ⓐ -> ⓑ -> ⓒ -> ⓓ -> ⓔ <--(main) <--(HEAD)
                  └> ⓘ -> ⓙ -> ⓚ <--(Branch 2)

현재 이 구조는 총 3개의 Branch로 이루어져 있으며, ⓒ, ⓓ는 각 Branch1과 Branch2의 base이다. 현재 작업을 수행중인 branch는 main branch이다.
main branch에서 수행된 commit은 총 5번이고, Branch1과 Branch2는 각각 3번씩 commit 되었다. 이 Project에서 시행된 commit은 총 11회이다.

Branch의 합병
1. Merge
  > Fast-forward
     - 간단하게 main branch에서 발생한 base 이후 어떠한 commit이 없었을 경우, 그 commit 이후에 발생한 Branch1의 commit을 모두 main branch의 base 이후의 commit으로 합병해버리는 방법이다.
  > 3-way merge
     - 우선 main branch에서 하나의 commit을 만들고 그 commit에 branch1에서 발생한 commit들을 넣는다. 그 후 포인터를 만들어진 그 commit으로 옮겨지게 된다.
     - 만약 파일이 합치려는 양쪽 branch에서 모두 수정된 이력이 있었을 경우, (main에서는 base 이후) 사용자에게 직접 수정할지, 아니면 양쪽 branch에서 파일들 중 하나의 파일을 선택할지에 대해 3가지의 선택 옵션을 부여한다.
2. Squash
  - branch1의 모든 commit을 합쳐서 (쥐어짜버려서) 3-way merge 방식과 비슷하게 한다.
  - 물론 commit history는 3-way에 비해 훨씬 간소화되어 표시된다.
3. Rebase
  - main branch에서 base 이후에 commit이 있었을 경우, main branch에서 마지막 commit으로 base를 이전시키고 Fast-forward 방식으로 merge를 진행한다.
